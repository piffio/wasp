"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[77109],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),c=u(n),h=i,m=c["".concat(l,".").concat(h)]||c[h]||d[h]||o;return n?a.createElement(m,s(s({ref:t},p),{},{components:n})):a.createElement(m,s({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,s=new Array(o);s[0]=h;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r[c]="string"==typeof e?e:i,s[1]=r;for(var u=2;u<o;u++)s[u]=n[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},38610:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(67294),i=n(44996);const o=e=>a.createElement("div",null,a.createElement("p",{align:"center"},a.createElement("figure",null,a.createElement("img",{style:{width:e.width},alt:e.alt,src:(0,i.Z)(e.source)}),a.createElement("figcaption",{class:"image-caption",style:{fontStyle:"italic",opacity:.6,fontSize:"0.9rem"}},e.caption))))},92908:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(67294),i=n(39960);n(44996);const o=()=>a.createElement("span",{className:"in-blog-cta--divider"}," \u2192 "),s=()=>a.createElement("p",{className:"in-blog-cta-link-container"},a.createElement(i.Z,{className:"in-blog-cta--link",to:"https://e44cy1h4s0q.typeform.com/to/ycUzQa5A"},"We are in Beta (try it out)!"),a.createElement(o,null),a.createElement(i.Z,{className:"in-blog-cta--link",to:"https://discord.gg/rzdnErX"},"Join our community"),a.createElement(o,null),a.createElement(i.Z,{className:"in-blog-cta--link",to:"https://wasp-lang.notion.site/Founding-Engineer-at-Wasp-402274568afa4d7eb7f428f8fa2c0816"},"Work with us"))},70524:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var a=n(87462),i=(n(67294),n(3905)),o=(n(39960),n(44996),n(92908),n(70589),n(38610));const s={title:"How to Add Auth with Lucia to Your React/Next.js App - A Step by Step Guide",authors:["lucaslima"],image:"/img/lua-auth/lucia-auth-banner.png",tags:["webdev","tech","react","nextjs","tutorial"]},r=void 0,l={permalink:"/blog/2024/08/13/how-to-add-auth-with-lucia-to-your-react-nextjs-app",editUrl:"https://github.com/wasp-lang/wasp/edit/release/web/blog/2024-08-13-how-to-add-auth-with-lucia-to-your-react-nextjs-app.md",source:"@site/blog/2024-08-13-how-to-add-auth-with-lucia-to-your-react-nextjs-app.md",title:"How to Add Auth with Lucia to Your React/Next.js App - A Step by Step Guide",description:"<ImgWithCaption",date:"2024-08-13T00:00:00.000Z",formattedDate:"August 13, 2024",tags:[{label:"webdev",permalink:"/blog/tags/webdev"},{label:"tech",permalink:"/blog/tags/tech"},{label:"react",permalink:"/blog/tags/react"},{label:"nextjs",permalink:"/blog/tags/nextjs"},{label:"tutorial",permalink:"/blog/tags/tutorial"}],readingTime:15,hasTruncateMarker:!1,authors:[{name:"Lucas Lima do Nascimento",title:"Content contributor",url:"https://github.com/LLxD",imageURL:"https://github.com/LLxD.png",key:"lucaslima"}],frontMatter:{title:"How to Add Auth with Lucia to Your React/Next.js App - A Step by Step Guide",authors:["lucaslima"],image:"/img/lua-auth/lucia-auth-banner.png",tags:["webdev","tech","react","nextjs","tutorial"]},prevItem:{title:"Wasp: The JavaScript Answer to Django for Web Development",permalink:"/blog/2024/08/20/django-vs-wasp"},nextItem:{title:"Wasp Launch Week #6: The Fun Side of Web Development \ud83d\udd7a \ud83e\udea9",permalink:"/blog/2024/07/15/wasp-launch-week-six"}},u={authorsImageUrls:[void 0]},p=[{value:"Why Lucia?",id:"why-lucia",level:2},{value:"Step 1: Setting up Next.js",id:"step-1-setting-up-nextjs",level:3},{value:"Step 2: Install Lucia",id:"step-2-install-lucia",level:3},{value:"Step 3: Set up Authentication",id:"step-3-set-up-authentication",level:3},{value:"Step 4: Add User to DB",id:"step-4-add-user-to-db",level:3},{value:"Step 5: Implement Login and Signup",id:"step-5-implement-login-and-signup",level:3},{value:"Step 6: Protect Routes",id:"step-6-protect-routes",level:3},{value:"Wasp Implementation",id:"wasp-implementation",level:2},{value:"Step 1: Create a Wasp Project",id:"step-1-create-a-wasp-project",level:3},{value:"Step 2: Add the User entity into our DB",id:"step-2-add-the-user-entity-into-our-db",level:3},{value:"Step 3: Define Authentication",id:"step-3-define-authentication",level:3},{value:"Step 4: Get your GitHub OAuth credentials and app running",id:"step-4-get-your-github-oauth-credentials-and-app-running",level:3},{value:"Step 5: Add the routes and pages",id:"step-5-add-the-routes-and-pages",level:3},{value:"Customizing Wasp Auth",id:"customizing-wasp-auth",level:3},{value:"Bonus Section: Adding Email/Password Login with Wasp and Customizing Auth",id:"bonus-section-adding-emailpassword-login-with-wasp-and-customizing-auth",level:3},{value:"Can you show us your support?",id:"can-you-show-us-your-support",level:2},{value:"Conclusion",id:"conclusion",level:3}],c={toc:p},d="wrapper";function h(e){let{components:t,...s}=e;return(0,i.kt)(d,(0,a.Z)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)(o.Z,{alt:"How to Add Auth to Your App",source:"/img/lua-auth/lucia-auth-banner.png",mdxType:"ImgWithCaption"}),(0,i.kt)("p",null,"Although authentication is one of the most common web app features, there are so many different ways to go about it, which makes it a very non-trivial task. In this post, I will share my personal experience using Lucia - a modern, framework-agnostic authentication library that has been getting, deservedly so, a lot of love from the community in recent months."),(0,i.kt)("p",null,"First, I will demonstrate how you can implement it within your Next.js application through a step-by-step guide you can follow. It will require a fair amount of code and configuration, but the process itself is quite straightforward."),(0,i.kt)("p",null,"Secondly, we\u2019ll see how to achieve the same with ",(0,i.kt)("a",{parentName:"p",href:"https://wasp-lang.dev/"},"Wasp")," in just a few lines of code. Wasp is a batteries-included, full-stack framework for React & Node.js that uses Lucia under the hood to implement authentication. It runs fully on your infrastructure and is 100% open-source and free."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"auth with Wasp",src:n(91950).Z,width:"612",height:"680"})),(0,i.kt)("h2",{id:"why-lucia"},"Why Lucia?"),(0,i.kt)("p",null,"When it comes to adding authentication to your applications, there are several popular solutions available. For instance, ",(0,i.kt)("a",{parentName:"p",href:"https://clerk.com/"},"Clerk")," offers a paid service, while ",(0,i.kt)("a",{parentName:"p",href:"https://next-auth.js.org/"},"NextAuth.js")," is an open-source solution alongside ",(0,i.kt)("a",{parentName:"p",href:"https://lucia-auth.com/"},"Lucia"),", which has become quite popular recently. "),(0,i.kt)("p",null,"These tools provide robust features, but committing to third-party services \u2014 which not only adds another layer of complexity but also have paid tiers you have to keep an eye on \u2014 might be an overkill for a small project. In-house solutions keep things centralized but leave it to a developer to implement some of the mentioned features."),(0,i.kt)("p",null,"In our case, Lucia has proved to be a perfect middle ground - it\u2019s not a third-party service and does not require a dedicated infrastructure, but it also provides a very solid foundation that\u2019s easy to build upon."),(0,i.kt)("p",null,"Now, let\u2019s dive into a step-by-step guide on how to implement your own authentication with Next.js and Lucia."),(0,i.kt)("h3",{id:"step-1-setting-up-nextjs"},"Step 1: Setting up Next.js"),(0,i.kt)("p",null,"First, create a new Next.js project:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npx create-next-app@latest my-nextjs-app\ncd my-nextjs-app\nnpm install\n")),(0,i.kt)("h3",{id:"step-2-install-lucia"},"Step 2: Install Lucia"),(0,i.kt)("p",null,"Next, install Lucia:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install lucia\n")),(0,i.kt)("h3",{id:"step-3-set-up-authentication"},"Step 3: Set up Authentication"),(0,i.kt)("p",null,"Create an ",(0,i.kt)("inlineCode",{parentName:"p"},"auth")," file in your project and add the necessary files for Lucia to be imported and initialized. It has a bunch of adapters for different databases, and you can check them all ",(0,i.kt)("a",{parentName:"p",href:"https://lucia-auth.com/database/"},"here"),". In this example, we\u2019re going to use SQLite:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'// lib/auth.ts\nimport { Lucia } from "lucia";\nimport { BetterSqlite3Adapter } from "@lucia-auth/adapter-sqlite";\n\nconst adapter = new BetterSQLite3Adapter(db); // your adapter\n\nexport const lucia = new Lucia(adapter, {\n  sessionCookie: {\n    // this sets cookies with super long expiration\n    // since Next.js doesn\'t allow Lucia to extend cookie expiration when rendering pages\n    expires: false,\n    attributes: {\n      // set to `true` when using HTTPS\n      secure: process.env.NODE_ENV === "production"\n    }\n  }\n});\n\n// To get some good Typescript support, add this!\ndeclare module "lucia" {\n  interface Register {\n    Lucia: typeof lucia;\n  }\n}\n')),(0,i.kt)("h3",{id:"step-4-add-user-to-db"},"Step 4: Add User to DB"),(0,i.kt)("p",null,"Let\u2019s add a database file to contain our schemas for now:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="lib/db.ts"',title:'"lib/db.ts"'},'import sqlite from "better-sqlite3";\n\nexport const db = sqlite("main.db");\n\ndb.exec(`CREATE TABLE IF NOT EXISTS user (\n    id TEXT NOT NULL PRIMARY KEY,\n    github_id INTEGER UNIQUE,\n    username TEXT NOT NULL\n)`);\n\ndb.exec(`CREATE TABLE IF NOT EXISTS session (\n    id TEXT NOT NULL PRIMARY KEY,\n    expires_at INTEGER NOT NULL,\n    user_id TEXT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES user(id)\n)`);\n\nexport interface DatabaseUser {\n  id: string;\n  username: string;\n  github_id: number;\n}\n')),(0,i.kt)("h3",{id:"step-5-implement-login-and-signup"},"Step 5: Implement Login and Signup"),(0,i.kt)("p",null,"To make this happen, we firstly have to create a GitHub OAuth app. This is relatively simple, you create it, add the necessary ENVs and callback URLs into your application and you\u2019re good to go. You can ",(0,i.kt)("a",{parentName:"p",href:"https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/creating-an-oauth-app"},"follow GitHub docs")," to check how to do that."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title=".env.local"',title:'".env.local"'},"GITHUB_CLIENT_ID=your-github-client-id\nGITHUB_CLIENT_SECRET=your-github-client-secret\n")),(0,i.kt)("p",null,"After that, it\u2019s a matter of adding login and signup functionalities to your pages, so, let\u2019s do that real quick: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="login/page.tsx"',title:'"login/page.tsx"'},'import { validateRequest } from "@/lib/auth";\nimport { redirect } from "next/navigation";\n\nexport default async function Page() {\n  const { user } = await validateRequest();\n  if (user) {\n    return redirect("/");\n  }\n  return (\n    <>\n      <h1>Sign in</h1>\n      <a href="/login/github">Sign in with GitHub</a>\n    </>\n  );\n}\n')),(0,i.kt)("p",null,"After adding the page, we also have to add the login redirect to GitHub and the callback that\u2019s going to be called. Let\u2019s first add the login redirect with the authorization URL:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="login/github/route.ts"',title:'"login/github/route.ts"'},'import { generateState } from "arctic";\nimport { github } from "../../../lib/auth";\nimport { cookies } from "next/headers";\n\nexport async function GET(): Promise<Response> {\n  const state = generateState();\n  const url = await github.createAuthorizationURL(state);\n\n  cookies().set("github_oauth_state", state, {\n    path: "/",\n    secure: process.env.NODE_ENV === "production",\n    httpOnly: true,\n    maxAge: 60 * 10,\n    sameSite: "lax"\n  });\n\n  return Response.redirect(url);\n}\n')),(0,i.kt)("p",null," And finally, the callback (which is what we actually add in GitHub OAuth):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="login/github/callback/route.ts"',title:'"login/github/callback/route.ts"'},'import { github, lucia } from "@/lib/auth";\nimport { db } from "@/lib/db";\nimport { cookies } from "next/headers";\nimport { OAuth2RequestError } from "arctic";\nimport { generateId } from "lucia";\n\nimport type { DatabaseUser } from "@/lib/db";\n\nexport async function GET(request: Request): Promise<Response> {\n  const url = new URL(request.url);\n  const code = url.searchParams.get("code");\n  const state = url.searchParams.get("state");\n  const storedState = cookies().get("github_oauth_state")?.value ?? null;\n  if (!code || !state || !storedState || state !== storedState) {\n    return new Response(null, {\n      status: 400\n    });\n  }\n\n  try {\n    const tokens = await github.validateAuthorizationCode(code);\n    const githubUserResponse = await fetch("https://api.github.com/user", {\n      headers: {\n        Authorization: `Bearer ${tokens.accessToken}`\n      }\n    });\n    const githubUser: GitHubUser = await githubUserResponse.json();\n    const existingUser = db.prepare("SELECT * FROM user WHERE github_id = ?").get(githubUser.id) as\n      | DatabaseUser\n      | undefined;\n\n    if (existingUser) {\n      const session = await lucia.createSession(existingUser.id, {});\n      const sessionCookie = lucia.createSessionCookie(session.id);\n      cookies().set(sessionCookie.name, sessionCookie.value, sessionCookie.attributes);\n      return new Response(null, {\n        status: 302,\n        headers: {\n          Location: "/"\n        }\n      });\n    }\n\n    const userId = generateId(15);\n    db.prepare("INSERT INTO user (id, github_id, username) VALUES (?, ?, ?)").run(\n      userId,\n      githubUser.id,\n      githubUser.login\n    );\n    const session = await lucia.createSession(userId, {});\n    const sessionCookie = lucia.createSessionCookie(session.id);\n    cookies().set(sessionCookie.name, sessionCookie.value, sessionCookie.attributes);\n    return new Response(null, {\n      status: 302,\n      headers: {\n        Location: "/"\n      }\n    });\n  } catch (e) {\n    if (e instanceof OAuth2RequestError && e.message === "bad_verification_code") {\n      // invalid code\n      return new Response(null, {\n        status: 400\n      });\n    }\n    return new Response(null, {\n      status: 500\n    });\n  }\n}\n\ninterface GitHubUser {\n  id: string;\n  login: string;\n}\n')),(0,i.kt)("p",null,"Other important thing here is that, now, we\u2019re going with GitHub OAuth, but, generally, these libraries contain a bunch of different login providers (including simple username and password), so it\u2019s usually just a pick and choose if you want to add other providers. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="lib/auth.ts"',title:'"lib/auth.ts"'},'import { Lucia } from "lucia";\nimport { BetterSqlite3Adapter } from "@lucia-auth/adapter-sqlite";\nimport { db } from "./db";\nimport { cookies } from "next/headers";\nimport { cache } from "react";\nimport { GitHub } from "arctic";\n\nimport type { Session, User } from "lucia";\nimport type { DatabaseUser } from "./db";\n\n// these two lines here might be important if you have node.js 18 or lower. \n// you can check Lucia\'s documentation in more detail if that\'s the case \n// (https://lucia-auth.com/getting-started/nextjs-app#polyfill)\n// import { webcrypto } from "crypto";\n// globalThis.crypto = webcrypto as Crypto;\n\nconst adapter = new BetterSqlite3Adapter(db, {\n  user: "user",\n  session: "session"\n});\n\nexport const lucia = new Lucia(adapter, {\n  sessionCookie: {\n    attributes: {\n      secure: process.env.NODE_ENV === "production"\n    }\n  },\n  getUserAttributes: (attributes) => {\n    return {\n      githubId: attributes.github_id,\n      username: attributes.username\n    };\n  }\n});\n\ndeclare module "lucia" {\n  interface Register {\n    Lucia: typeof lucia;\n    DatabaseUserAttributes: Omit<DatabaseUser, "id">;\n  }\n}\n\nexport const validateRequest = cache(\n  async (): Promise<{ user: User; session: Session } | { user: null; session: null }> => {\n    const sessionId = cookies().get(lucia.sessionCookieName)?.value ?? null;\n    if (!sessionId) {\n      return {\n        user: null,\n        session: null\n      };\n    }\n\n    const result = await lucia.validateSession(sessionId);\n    // next.js throws when you attempt to set cookie when rendering page\n    try {\n      if (result.session && result.session.fresh) {\n        const sessionCookie = lucia.createSessionCookie(result.session.id);\n        cookies().set(sessionCookie.name, sessionCookie.value, sessionCookie.attributes);\n      }\n      if (!result.session) {\n        const sessionCookie = lucia.createBlankSessionCookie();\n        cookies().set(sessionCookie.name, sessionCookie.value, sessionCookie.attributes);\n      }\n    } catch {}\n    return result;\n  }\n);\n\nexport const github = new GitHub(process.env.GITHUB_CLIENT_ID!, process.env.GITHUB_CLIENT_SECRET!);\n')),(0,i.kt)("h3",{id:"step-6-protect-routes"},"Step 6: Protect Routes"),(0,i.kt)("p",null,"After adding all that stuff to make the login properly work, we just have to ensure that routes are protected by checking authentication status \u2014 in this case, this is a simple page that shows username, id and a button in case signed in, and redirects to /login, where the user will complete the login above through a form."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="profile/page.tsx"',title:'"profile/page.tsx"'},'import { lucia, validateRequest } from "@/lib/auth";\nimport { redirect } from "next/navigation";\nimport { cookies } from "next/headers";\n\nexport default async function Page() {\n  const { user } = await validateRequest();\n  if (!user) {\n    return redirect("/login");\n  }\n  return (\n    <>\n      <h1>Hi, {user.username}!</h1>\n      <p>Your user ID is {user.id}.</p>\n      <form action={logout}>\n        <button>Sign out</button>\n      </form>\n    </>\n  );\n}\n\nasync function logout(): Promise<ActionResult> {\n  "use server";\n  const { session } = await validateRequest();\n  if (!session) {\n    return {\n      error: "Unauthorized"\n    };\n  }\n\n  await lucia.invalidateSession(session.id);\n\n  const sessionCookie = lucia.createBlankSessionCookie();\n  cookies().set(sessionCookie.name, sessionCookie.value, sessionCookie.attributes);\n  return redirect("/login");\n}\n\ninterface ActionResult {\n  error: string | null;\n}\n')),(0,i.kt)("p",null,"Piece of cake, isn\u2019t it? Well, not really. "),(0,i.kt)("p",null,"Let\u2019s recap which steps were necessary to actually make this happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Set up your app."),(0,i.kt)("li",{parentName:"ul"},"Add Lucia."),(0,i.kt)("li",{parentName:"ul"},"Set up authentication."),(0,i.kt)("li",{parentName:"ul"},"Add User to DB."),(0,i.kt)("li",{parentName:"ul"},"Obtain GitHub OAuth credentials and configure your environment variables."),(0,i.kt)("li",{parentName:"ul"},"Create some util functions."),(0,i.kt)("li",{parentName:"ul"},"Add Login and Sign up routes, with custom made components."),(0,i.kt)("li",{parentName:"ul"},"Finally, create a protected route.")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://media2.giphy.com/media/3ofSBnYbEPePeigIMg/giphy.gif?cid=7941fdc6x77sivlvr6hs2yu5aztvwjvhgugv6b718mjanr2h&ep=v1_gifs_search&rid=giphy.gif&ct=g",alt:"https://media2.giphy.com/media/3ofSBnYbEPePeigIMg/giphy.gif?cid=7941fdc6x77sivlvr6hs2yu5aztvwjvhgugv6b718mjanr2h&ep=v1_gifs_search&rid=giphy.gif&ct=g"})),(0,i.kt)("p",null,"Honestly, when trying to create something cool ",(0,i.kt)("strong",{parentName:"p"},"FAST"),", repeating these steps and debugging a few logical problems here and there that always occur can feel a little bit frustrating. Soon, we\u2019ll take a look at Wasp\u2019s approach to solving that same problem and we\u2019ll be able to compare how much easier Wasp\u2019s auth implementation process is."),(0,i.kt)("p",null,"In case you want to check the whole code for this part, ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/lucia-auth/examples/tree/main/nextjs-app/github-oauth"},"Lucia has an example repo")," (that is the source of most of the code shown), so, you can check it out if you\u2019d like."),(0,i.kt)("h2",{id:"wasp-implementation"},"Wasp Implementation"),(0,i.kt)("p",null,"Now, let\u2019s go through how we can achieve the same things with Wasp \ud83d\udc1d. Although it still uses Lucia in the background, Wasp takes care of all the heavy-lifting for you, making the process much quicker and simpler. Let\u2019s check out the developer experience for ourselves."),(0,i.kt)("p",null,"Before we just into it, in case you\u2019re more of a visual learner, here\u2019s a 1-minute video showcasing auth with wasp."),(0,i.kt)("div",{className:"video-container"},(0,i.kt)("iframe",{src:"https://www.youtube.com/embed/Qiro77q-ulI?si=JVBcFAk5dnR3Q0PL",frameborder:"1",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0})),(0,i.kt)("p",null,"As seen in the video, Wasp is a framework for building apps with the benefits of using a configuration file to make development easier. It handles many repetitive tasks, allowing you to focus on creating unique features. In this tutorial, we\u2019ll also learn more about the Wasp config file and see how it makes setting up authentication simpler."),(0,i.kt)("h3",{id:"step-1-create-a-wasp-project"},"Step 1: Create a Wasp Project"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"curl -sSL https://get.wasp-lang.dev/installer.sh | sh\nwasp new my-wasp-app\ncd my-wasp-app\n")),(0,i.kt)("h3",{id:"step-2-add-the-user-entity-into-our-db"},"Step 2: Add the User entity into our DB"),(0,i.kt)("p",null,"As simple as defining the ",(0,i.kt)("inlineCode",{parentName:"p"},"app.auth.userEntity")," entity in the ",(0,i.kt)("inlineCode",{parentName:"p"},"schema.prisma")," file and running some migrations:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-prisma"},"model User {\n  id Int @id @default(autoincrement())\n  email   String   @unique\n  name    String?\n  // Add your own fields below\n  // ...\n}\n")),(0,i.kt)("h3",{id:"step-3-define-authentication"},"Step 3: Define Authentication"),(0,i.kt)("p",null,"In your main Wasp configuration, add the authentication provider you want for your app"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},'app myApp {\n  wasp: {\n    version: "^0.14.0"\n  },\n  title: "My App",\n  auth: {\n    userEntity: User,\n    methods: {\n      // 2. Enable Github Auth\n      gitHub: {}\n    },\n    onAuthFailedRedirectTo: "/login"\n  },\n}\n')),(0,i.kt)("p",null,"And after that, just run in your terminal:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"wasp db migrate-dev\n")),(0,i.kt)("h3",{id:"step-4-get-your-github-oauth-credentials-and-app-running"},"Step 4: Get your GitHub OAuth credentials and app running"),(0,i.kt)("p",null,"This part is similar for both frameworks, you can follow the documentation GitHub provides here to do so: ",(0,i.kt)("a",{parentName:"p",href:"https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/creating-an-oauth-app"},"Creating an OAuth app - GitHub Docs"),". For wasp app, the callback urls are: "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"While developing: ",(0,i.kt)("inlineCode",{parentName:"li"},"http://localhost:3001/auth/github/callback")),(0,i.kt)("li",{parentName:"ul"},"After deploying: ",(0,i.kt)("inlineCode",{parentName:"li"},"https://your-server-url.com/auth/github/callback"))),(0,i.kt)("p",null,"After that, get your secrets and add it to the env file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title=".env.server"',title:'".env.server"'},"GITHUB_CLIENT_ID=your-github-client-id\nGITHUB_CLIENT_SECRET=your-github-client-secret\n")),(0,i.kt)("h3",{id:"step-5-add-the-routes-and-pages"},"Step 5: Add the routes and pages"),(0,i.kt)("p",null,"Now, let\u2019s simply add some routing and the page necessary for login \u2014 the process is way easier since Wasp has pre-built Login and Signup Forms, we can simply add those directly:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},'route SignupRoute { path: "/signup", to: SignupPage }\npage SignupPage {\n  component: import { SignupPage } from "@src/SignupPage"\n}\n\nroute LoginRoute { path: "/login", to: LoginPage }\npage LoginPage {\n  component: import { LoginPage } from "@src/LoginPage"\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/LoginPage.jsx"',title:'"src/LoginPage.jsx"'},"import { Link } from 'react-router-dom'\nimport { LoginForm } from 'wasp/client/auth'\n\nexport const LoginPage = () => {\n  return (\n    <div style={{ maxWidth: '400px', margin: '0 auto' }}>\n      <LoginForm />\n      <br />\n      <span>\n        I don't have an account yet (<Link to=\"/signup\">go to signup</Link>).\n      </span>\n    </div>\n  )\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/SignupPage.jsx"',title:'"src/SignupPage.jsx"'},"import { Link } from 'react-router-dom'\nimport { SignupForm } from 'wasp/client/auth'\n\nexport const SignupPage = () => {\n  return (\n    <div style={{ maxWidth: '400px', margin: '0 auto' }}>\n      <SignupForm />\n      <br />\n      <span>\n        I already have an account (<Link to=\"/login\">go to login</Link>).\n      </span>\n    </div>\n  )\n}\n")),(0,i.kt)("p",null,"And finally, for protecting routes, is as simple as changing it in ",(0,i.kt)("inlineCode",{parentName:"p"},"main.wasp")," adding ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"authRequired: true"))," , so, we can simply add it like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},'page MainPage {\n  component: import Main from "@src/pages/Main",\n  authRequired: true\n}\n')),(0,i.kt)("p",null,"If you\u2019d like to check this example in more depth, feel free to check this repo here: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/wasp-lang/wasp/tree/release/examples/todo-typescript"},"wasp/examples/todo-typescript at release \xb7 wasp-lang/wasp (github.com)"),".\nOther great place to check is their documentation, which can be found ",(0,i.kt)("a",{parentName:"p",href:"https://wasp-lang.dev/docs/auth/overview"},"here"),". It covers most of what I said here, and even more (e.g. the awesome new ",(0,i.kt)("a",{parentName:"p",href:"https://wasp-lang.dev/docs/auth/auth-hooks"},"hooks")," that came with Wasp v0.14)"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://media4.giphy.com/media/nDSlfqf0gn5g4/giphy.gif?cid=7941fdc6oxsddr7p8rjsuavcyq7ugiad8iqdu1ei25urcge4&ep=v1_gifs_search&rid=giphy.gif&ct=g",alt:"https://media4.giphy.com/media/nDSlfqf0gn5g4/giphy.gif?cid=7941fdc6oxsddr7p8rjsuavcyq7ugiad8iqdu1ei25urcge4&ep=v1_gifs_search&rid=giphy.gif&ct=g"})),(0,i.kt)("p",null,"Way easier, isn\u2019t it? Let\u2019s review the steps we took to get here:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Set up the project."),(0,i.kt)("li",{parentName:"ul"},"Add the User entity to the database."),(0,i.kt)("li",{parentName:"ul"},"Define authentication in the main Wasp configuration."),(0,i.kt)("li",{parentName:"ul"},"Obtain GitHub OAuth credentials and configure your environment variables."),(0,i.kt)("li",{parentName:"ul"},"Add routes and pages for login and signup with pre-built, easy-to-use components."),(0,i.kt)("li",{parentName:"ul"},"Protect routes by specifying ",(0,i.kt)("inlineCode",{parentName:"li"},"authRequired")," in your configuration.")),(0,i.kt)("h3",{id:"customizing-wasp-auth"},"Customizing Wasp Auth"),(0,i.kt)("p",null,"If you need more control and customization over the authentication flow, Wasp provides Auth hooks that allow you to tailor the experience to your app's specific needs. These hooks enable you to execute custom code during various stages of the authentication process, ensuring that you can implement any required custom behavior."),(0,i.kt)("p",null,"For more detailed information on using Auth hooks with Wasp, visit the ",(0,i.kt)("a",{parentName:"p",href:"https://wasp-lang.dev/docs/auth/auth-hooks"},"Wasp documentation"),"."),(0,i.kt)("h3",{id:"bonus-section-adding-emailpassword-login-with-wasp-and-customizing-auth"},"Bonus Section: Adding Email/Password Login with Wasp and Customizing Auth"),(0,i.kt)("p",null,"Now let\u2019s imagine we want to add email and password authentication \u2014 with all the usual features we\u2019d expect that would follow this login method (e.g. reset password, email verification, etc.). "),(0,i.kt)("p",null,"With Wasp, all we have to do is add a few lines to your main.wasp file, so, simply updating your Wasp configuration to include email/password authentication makes it work straight out of the box!"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://wasp-lang.dev/img/auth-ui/auth-demo-compiler.gif",alt:"https://wasp-lang.dev/img/auth-ui/auth-demo-compiler.gif"})),(0,i.kt)("p",null,"Wasp will handle the rest, also updating UI components and ensuring a smooth and secure authentication flow."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-wasp",metastring:'title="main.wasp"',title:'"main.wasp"'},'app myApp {\n  wasp: {\n    version: "^0.14.0"\n  },\n  title: "My App",\n  auth: {\n    // 1. Specify the User entity\n    userEntity: User,\n    methods: {\n      // 2. Enable Github Auth\n      gitHub: {},\n      email: {\n        // 3. Specify the email from field\n        fromField: {\n          name: "My App Postman",\n          email: "hello@itsme.com"\n        },\n        // 4. Specify the email verification and password reset options\n        emailVerification: {\n          clientRoute: EmailVerificationRoute, //this route/page should be created\n        },\n        passwordReset: {\n          clientRoute: PasswordResetRoute, //this route/page should be created\n        },\n        // Add an emailSender -- Dummy just logs to console for dev purposes\n        // but there are a ton of supported providers :D\n        emailSender: {\n          provider: Dummy,\n        },\n      },\n    },\n    onAuthFailedRedirectTo: "/login"\n  },\n}\n')),(0,i.kt)("p",null,"Implementing this in Next.js with Lucia would take a lot more work, involving a bunch of different stuff from actually sending the emails, to generating the verification tokens and more. They reference this ",(0,i.kt)("a",{parentName:"p",href:"https://lucia-auth.com/guides/email-and-password/email-verification-links"},"here"),", but again, Wasp\u2019s Auth makes the whole process way easier, handling a bunch of the complexity for us while also giving a bunch of other UI components, ready to use, to ease the UI details (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"VerifyEmailForm"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"ForgotPasswordForm")," and, ",(0,i.kt)("inlineCode",{parentName:"p"},"ResetPasswordForm"),")."),(0,i.kt)("p",null,"The whole point here is the difference in time and developer experience in order to implement the same scenarios. For the Next.js project with Lucia, you will spend at least a few hours implementing everything if you\u2019re going all by yourself. That same experience translates to no more than 1 hour with Wasp. What to do with the rest of the time? ",(0,i.kt)("strong",{parentName:"p"},"Implement the important stuff your particular business requires!")),(0,i.kt)("h2",{id:"can-you-show-us-your-support"},"Can you show us your support?"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://media2.giphy.com/media/l0MYAs5E2oIDCq9So/giphy.gif?cid=7941fdc6l6i66eq1dc7i5rz05nkl4mgjltyv206syb0o304g&ep=v1_gifs_search&rid=giphy.gif&ct=g",alt:"https://media2.giphy.com/media/l0MYAs5E2oIDCq9So/giphy.gif?cid=7941fdc6l6i66eq1dc7i5rz05nkl4mgjltyv206syb0o304g&ep=v1_gifs_search&rid=giphy.gif&ct=g"})),(0,i.kt)("p",null,"Are you interested in more content like this? Sign up for ",(0,i.kt)("a",{parentName:"p",href:"https://wasp-lang.dev/#signup"},"our newsletter")," and give us ",(0,i.kt)("a",{parentName:"p",href:"https://www.github.com/wasp-lang/wasp"},"a star on GitHub"),"! We need your support to keep pushing our projects forward \ud83d\ude00"),(0,i.kt)("h3",{id:"conclusion"},"Conclusion"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://media2.giphy.com/media/l1AsKaVNyNXHKUkUw/giphy.gif?cid=7941fdc6u6vp4j2gpjfuizupxlvfdzskl03ncci2e7jq17zr&ep=v1_gifs_search&rid=giphy.gif&ct=g",alt:"https://media2.giphy.com/media/l1AsKaVNyNXHKUkUw/giphy.gif?cid=7941fdc6u6vp4j2gpjfuizupxlvfdzskl03ncci2e7jq17zr&ep=v1_gifs_search&rid=giphy.gif&ct=g"})),(0,i.kt)("p",null,"I think that if you\u2019re a developer who wants to get things done, you probably noted the significant difference in complexity levels of both of those implementations. "),(0,i.kt)("p",null,"By reducing boilerplate and abstracting repetitive tasks, Wasp allows developers to focus more on building unique features rather than getting bogged down by authentication details. This can be especially beneficial for small teams or individual developers aiming to launch products quickly."),(0,i.kt)("p",null,"Of course, generally when we talk abstractions, it always comes with the downside of losing the finesse of a more personal implementation. In this case, Wasp provides a bunch of stuff for you to implement around and uses Lucia on the background, so the scenario where there\u2019s a mismatch of content implementation is highly unlikable to happen."),(0,i.kt)("p",null,"In summary, while implementing your own authentication with Next.js and Lucia provides complete control and customization, it can be complex and time-consuming. On the other hand, using a solution like Wasp simplifies the process, reduces code length, and speeds up development."))}h.isMDXComponent=!0},70589:(e,t,n)=>{n.d(t,{ZP:()=>r});var a=n(87462),i=(n(67294),n(3905));const o={toc:[]},s="wrapper";function r(e){let{components:t,...n}=e;return(0,i.kt)(s,(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Wasp is a configuration language (DSL) for building full-stack web apps with less code and best practices that works alongside React and Node.js. We are on a mission to streamline web app development while empowering developers to continue using the power of code and their favorite tools. We are backed by Y Combinator and engineers from Airbnb, Facebook, and Lyft.")))}r.isMDXComponent=!0},91950:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/comparison-7ba8be56668425ec89309e370f0a872c.png"}}]);